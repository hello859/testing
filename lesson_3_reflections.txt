When would you want to use a remote repository rather than keeping all your work local?

Using a remote repository is good for several possible reasons - in this case what will be discussed are the scenarios where 
a remote is used exclusively over a local repository, except for accessing files every now and then.

It is good for sharing work.
If you have a faulty PC etc. it is good for having a backup and possibly a low fingerprint - not too sure about the second part.
Don't let your friends know who secretly check your computer that you are a l33t programmer.

Part 2:
Considering why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

It is all about control vs. extra work. When Git is allowed to update a repository automatically, there is bound to be a set of rules that it must follow, which probably aren't all encompassing, meaning there are some/many cases that it will not handle well. Such as if a person makes a mistake - whom you are collaborating with - and uploads many files at once by accident. It wouldn't be desirable to say the least to have those files downloaded to your PC.

Part 3:
Describing the differences between forks, clones and branches. When should one use one instead of another?

Forking is when you clone a repository from another person's github to your own so that you may make your own version with it. It only exits on your github until you decide to clone it to your local repository.

Cloning is when you download a repository or copy one from one place to another. It generates a copy of the repository and keeps the history of the commits.

Branches are when you clone a repository state, which is exclusive i.e. you can only be in one state at a time. It is similar to forking in that you clone the repository so that you may make a different version or whatever is desired with it. It allows for merging after.

Part 4:
Considering what is the benefit of having a copy of the last known state of the remote stored locally.

So that you can roll back and help with merges. Also, possibly as a backup for the online repo.

Part 5:
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Share files through emails, copy pasting code etc into chat. Using git hub is better for larger groups.

Part 6:
Considering when would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Making changes in a separate branch allows you to keep master safe in case you mess it up. If it works, then you can just merge back in and delete the branch. It's relatively lightweight too. However, while probably best practice, that isn't to say that you can't make changes to master itself, clearly it is allowed. However, this should probably be kept to simple changes and no new features you aren't entirely sure about.
